<!doctype html>
<html lang="en">
	<head>
		<% include head %>
		<% include css %>
	</head>
	<body>
		<% include menu %>
		<div class="container">
            <div class="row">
            	<div class="col-md-12"> <!-- Main content -->
            		<div class="row"> <!-- Demo -->
                        <h1>
                            <strong><%= docID %></strong>
                            <div class="pull-right">
                                <button id="btnHistoryMode" class="btn btn-default" onclick="switchToHistoryMode()">
                                    <span class="glyphicon glyphicon-time" ></span>
                                    Switch to history mode
                                </button>
                                <button id="btnEditionMode" class="btn btn-default hide" onclick="switchToEditionMode()">
                                    <span class="glyphicon glyphicon-pencil"></span>
                                    Switch to edition mode
                                </button>
                                <button id="btnOnlineMode" class="btn btn-default" onclick="switchToOnlineMode()">
                                    <span class="glyphicon glyphicon-log-in" ></span>
                                    Switch to online mode
                                </button>
                                <button id="btnOfflineMode" class="btn btn-default hide" onclick="switchToOfflineMode()">
                                    <span class="glyphicon glyphicon-log-out"></span>
                                    Switch to offline mode
                                </button>
                                <div id="connectionIndicator" class="offline-ui offline-ui-down">
                                    Offline!
                                </div>
                            </div>

                        </h1>
            			<div class="col-md-10 col-md-offset-1">
            				<div id="historySlider" class="range range-primary hide">
                                <button class="btn btn-default btn-sm" type="button" onclick="prevState()">
                                    <span class="glyphicon glyphicon-chevron-left"></span>
                                </button>
                                <input id="range" type="range" name="range" min="0" max="1" value="1" oninput="displayState();" onclick="console.log('Yo');displayState();">
                                <output onchange="displayState();" id="rangePrimary">0</output>
                                <button class="btn btn-default btn-sm" type="button" onclick="nextState()">
                                    <span class="glyphicon glyphicon-chevron-right"></span>
                                </button>
                            </div>
                            <% include editor %>
	        				<br>
                    		<div class="row">
                                <div class="col-md-6">
                                   <% include awareness %>
                                </div>
                                <div class="col-md-6">
                                    <form class="form-horizontal" role="form">
                                        <div class="form-group">
                                            <label for="link" class="col-sm-5 control-label">Invite your friends:</label>
                                            <div class="col-sm-7">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="link" value="<%= link %>" readonly="readonly" style="background-color: white;">
                                                    <span class="input-group-btn">
                                                        <button type="button" id="copy-button" class="btn btn-default" data-clipboard-text="<%= link %>" data-toggle="tooltip" data-placement="bottom" title="copy to clipboard" style="height:34px;">
                                                            <img src="/assets/img/icon-clipboard.png">
                                                        </button>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
            	</div>
            </div>
           	<hr>
            <% include footer %>
        </div>
		<% include scripts %>
		<% include scripts-editor %>
        <% include script-dbjs %>
		<% include notifications %>
		<% 
        	if(privateDoc === true) { 
        		%> <% include modal-pwd-doc %> <%
        	}
        %>
		<script>
			"use strict";

            var serverDB;
            var client;
            var coordinator;
            var editor;
            var network;
            var awareness;

            var online = false;
            var posting = $.post('/ajax/testConnection');
            posting.done(function (data) {
                online = true;
            });
            posting.always(function () {
                db.open({
                    server: 'mute',
                    version: 1,
                    schema: {
                        models: {
                            key: { keyPath: 'id' , autoIncrement: true },
                            // Optionally add indexes
                            indexes: {
                                creationDate: {},
                                docID: { unique: true },
                                history: {},
                                lastModificationDate: {},
                                replicaNumber: {},
                                ropes: {},
                                bufferLocalLogootSOp: {},
                                mode: {}
                            }
                        }
                    }
                })
                .done(function (s) {
                    serverDB = s
                    initPage();
                });
            });

            function initMute() {
                coordinator.setEditor(editor);
                if(online === true) {
                    network = new Mute.SocketIOAdapter(coordinator);
                    coordinator.setNetwork(network);
                    network.on('disconnect', function () {
                        $('#btnOfflineMode').addClass('hide');
                        $('#btnOnlineMode').removeClass('hide');
                        $('#connectionIndicator').removeClass('offline-ui-up').addClass('offline-ui-down').html('Offline!');
                    });
                    network.on('connect', function () {
                        $('#btnOnlineMode').addClass('hide');
                        $('#btnOfflineMode').removeClass('hide');
                        $('#connectionIndicator').removeClass('offline-ui-down').addClass('offline-ui-up').html('Online!');
                    });
                }
                coordinator.on('initEditor', function (data) {
                    str = '';
                    currentState = 0;
                });
                coordinator.on('updateHistoryScrollerRange', function (data) {
                    $('#range').attr('max', data.length);
                    //displayState();
                });
                coordinator.on('updateHistoryScrollerValue', function (data) {
                    $('#range').attr('value', data.length);
                    displayState();
                });

                coordinator.init();
            }

            function initPage () {
                hljs.initHighlightingOnLoad();

                if(online === true) {
                    $('#copy-button').tooltip({ container: 'body', delay: { show: 0, hide: 100 } });
                    client = new ZeroClipboard(document.getElementById("copy-button"));

                    $('#copy-button').on('mouseout', function () {
                         $('#copy-button').attr('data-original-title', 'copy to clipboard');
                    });

                    client.on('ready', function (readyEvent) {
                        client.on('aftercopy', function (event) {
                            $('#copy-button').attr('data-original-title', 'copied!');
                            $('#copy-button').tooltip('show');
                        });
                    });
                }

                coordinator = new Mute.Coordinator('<%= docID %>', serverDB);
                editor = new Mute.AceEditorAdapter('<%= editorID %>', coordinator);
                awareness = new AwarenessAdapter(coordinator, editor, $('#<%= nbOperationsItemID %>')[0], $('#<%= lastModificationDateItemID %>')[0]);
                if(<%= privateDoc %> === false) {
                    initMute();
                }
            }

            var currentState = 0;
            var str = '';

            function prevState() {
                $('#range').val(currentState-1);
                displayState();
            }

            function nextState() {
                $('#range').val(currentState+1);
                displayState();
            }

            function displayState() {
                var newState = parseInt($('#range').val());
                $('#rangePrimary').val(newState);
                if(currentState <= coordinator.getHistoryLength()) {
                    str = coordinator.updateState(str, currentState, newState);    
                }
                currentState = newState;
                editor.editor.session.doc.setValue(str);
            }

            function switchToHistoryMode() {
                var length = coordinator.getHistoryLength();
                $('#btnHistoryMode').addClass('hide');
                $('#btnEditionMode').removeClass('hide');
                $('#historySlider').removeClass('hide');
                coordinator.editor.toHistoryMode();
                $('#range').attr('max', length);
                displayState();
            }

            function switchToEditionMode() {
                $('#btnEditionMode').addClass('hide');
                $('#historySlider').addClass('hide');
                $('#btnHistoryMode').removeClass('hide');
                editor.editor.session.doc.setValue(coordinator.ropes.str);
                coordinator.editor.toEditionMode();
            }

            function switchToOnlineMode() {
                console.log('switchToOnlineMode');
                coordinator.toOnlineMode();
            }

            function switchToOfflineMode() {
                console.log('switchToOfflineMode');
                coordinator.toOfflineMode();
            }

            console.log('docID: <%= docID %>');
        </script>
	</body>
</html>