<!doctype html>
<html lang="en">
    <head>
        <% include head %>
        <% include css %>
    </head>
    <body id="top">
        <% include menu %>
        <div class="container">
            <div class="row">
                <div class="col-md-8"> <!-- Main content -->
                    <h1 id="getting-started">Getting started</h1>
                    <hr>
                    <p class="lead"><strong>MUTE</strong> is Javascript library. It's composed of two modules : one client-side, one server-side. In order to set your own application, you will need to install each one.</p>
                    <h3 id="client">Client</h3>
                    <hr>
                    <p class="lead">The client-side module is used in order to change textareas into real-time collaborative text editors, to send modifications made by the user to collaborators and to update the document when changes are done by others.</p>
                    <p>To install it, you have first to clone the module in the Javascript folder of your website:</p> 
                    <strong>In your JS directory:</strong>
                    <pre>git clone https://github.com/MatthieuNICOLAS/mute-client.git</pre>
                    <p>Then you have to install the dependencies and use the Grunt script provided to generate the production file:</p>
                    <strong>In your JS directory:</strong>
                    <pre>cd mute-client/
npm install
grunt
</pre>
                    <p>In its current version, <strong>MUTE</strong> works using <a target="_blank" href="http://ace.c9.io/#nav=about">Ace</a> as text editor, so you will have to download it.</p>
                    <strong>In your JS directory:</strong>
                    <pre>git clone git://github.com/ajaxorg/ace.git</pre>
                    <p>In the same way, <strong>MUTE</strong> use, by default, Websockets implementation <a target="_blank" href="http://socket.io/">socket.io</a> to broadcast modifications made by users to each other.</p>
                    <strong>At the root of your website:</strong>
                    <pre>npm install socket.io@0.9.16</pre>
                    <p>All you have to do now is to create the object used by <strong>MUTE</strong> to manage the real-time collaborative text edition.</p>
                    <strong>In your webpage:</strong>
                    <pre>
<code>&lt;script src="path/js/ace/src/ace.js"&gt;&lt;/script&gt;
&lt;script src="/socket.io/socket.io.js"&gt;&lt;/script&gt;
&lt;script src="path/js/mute-client/build/mute-client.js"&gt;&lt;/script&gt;
&lt;script&gt;
    var coordinator = new Mute.Coordinator(docID);
    var editor = new Mute.AceEditorAdapter(editorID, coordinator);
    coordinator.setEditor(editor);
    var network = new Mute.SocketIOAdapter(coordinator);
    coordinator.setNetwork(network);
&lt;/script&gt;</code></pre>
                    <h3 id="server">Server</h3>
                    <hr>
                    <p class="lead">The server-module is used to create documents, to save their state in order to new clients to join or to resume sessions, and to broadcast changes made by users to others.</p>
                    <p>It's a NodeJS module published on <a target="_blank" href="https://www.npmjs.org/">npm</a>, so installing it is rather simple.</p>
                    <strong>At the root of your website:</strong>
                    <pre>npm install mute-server</pre>
                    <p>Then, you need to add the following lines:</p>
                    <strong>In your app.js file:</strong>
                    <pre>
<code>var server = require('http').createServer(app);
var Coordinator = require('mute-server').Coordinator,;
var SocketIOAdapter = require('mute-server').SocketIOAdapter;

var coordinator = new Coordinator();
var socketIOAdapter = new SocketIOAdapter(server, coordinator);
coordinator.setNetwork(socketIOAdapter);
coordinator.addDoc(docID);</code></pre>
                    Your application is now <strong>able to run</strong>, so don't hesitate to create a basic webpage in order to test it.
                    <h1 id="going-further">Going Further</h1>
                    <hr>
                    <p class="lead">We're now going to see how to implement some <em>awareness features</em> to <strong>MUTE</strong> and how to develop new modules</p>
                    <h3 id="awareness-module">Awareness module</h3>
                    <hr>
                    <p class="lead">Awareness is a necessary feature in a real-time collaborative editor, since it allows users to know basics informations like with how many people they're currently working and on which sections of the document the collaborators are working. Theses features help clients to work more efficiently together.</p>
                    <p>In order to implement such features, your module will have to listen to the <em>awareness event</em> and to update the user interface: this event is emitted by the coordinator and provides some useful data which like the current number of distant operations waiting to be applied to the local model or the current number of collaborators working on the document.</p>
                    <strong>Data provided by the <em>awareness event</em>:</strong><br><br>
                    <pre>
<code>data: ***REMOVED***
    nbLogootSOp // Number of distant operations waiting to be applied to the local model
***REMOVED***</code></pre>
                    <p>Let's take a look at the <strong>awareness module</strong> we developed for this demo. Its role is to display <em>nbLogootSOp</em> and to alert the user if there's too many operations waiting:</p>
                    <strong>awareness-adapter.js:</strong>
                    <pre>
<code>var AwarenessAdapter = function (coordinator, items) ***REMOVED***
    var awarenessAdapter = this;
    this.coordinator = coordinator;
    console.log(items);
    this.item = items[0];
    this.coordinator.on('awareness', function (data) ***REMOVED***
        awarenessAdapter.updateItem(data);
***REMOVED***);
***REMOVED***;

AwarenessAdapter.prototype.updateItem = function (data) ***REMOVED***
    $('#'+this.item.id).html(data.nbLogootSOp + ' operation(s)');
    // Changing the text color according to the number of operations waiting
    if(data.nbLogootSOp >= 0 && data.nbLogootSOp < 10) ***REMOVED***
        $('#'+this.item.id).attr('class', 'text-success');
***REMOVED***
    else if(data.nbLogootSOp >= 10 && data.nbLogootSOp < 20) ***REMOVED***
        $('#'+this.item.id).attr('class', 'text-warning');
***REMOVED***
    else ***REMOVED***
        $('#'+this.item.id).attr('class', 'text-danger');
***REMOVED***
***REMOVED***;</code></pre>
                    <p>All we have to do now is to add it at our previous code.</p>
                    <strong>In your webpage:</strong>
                    <pre><code>&lt;p&gt;
    &lt;strong&gt;Number of distant operations waiting for integration: &lt;/strong&gt;&lt;span id="awarenessID" class="text-success"&gt;0 operation(s)&lt;/span&gt;
&lt;/p&gt;
&lt;script&gt;
    var awareness = new AwarenessAdapter(coordinator, $('#awarenessID'));
&lt;/script&gt;</code></pre>
                    <p>You can now easily write your own awareness module, choosing which data're interesting to display to your users and how you want to display them.</p>
                    <h3 id="text-editor-adapter">Text editor adapter</h3>
                    <hr>
                    <p class="lead">The text editor adapter is used as a bridge between the coordinator and the text editor: it emits events to signal the text operations corresponding to the users' actions while listening to the coordinator's events to update the document according to the collaborators' inputs.</p>
                    <p>By default, <strong>MUTE</strong> uses <a target="_blank" href="http://ace.c9.io/#nav=about">Ace</a> as text editor. But if it doesn't answer, you can replace it by any other text editor, as long as you're able to write the corresponding adapter: <strong>MUTE</strong> communicate with the text editor adapter via events, so you will have to handle events generate by your text editor and to format data to the structure <strong>MUTE</strong> is expecting. Also, your text editor adapter will have to  handle <strong>MUTE</strong>'s event and to translate it for your text editor.</p>
                    <div id="popover" class="popover top hide">
                        <div class="arrow"></div>
                        <h4 id="popover-title" class="popover-title">Init</h4>
                        <div id="popover-content" class="popover-content">
                            <p>Ici une explication du message + le format des données</p>
                        </div>
                    </div>
                    <div id="container"></div>
                    <h3 id="network-adapter">Network adapter</h3>
                    <hr>
                    <p class="lead"></p>
                    <p></p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
                    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
                    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
                    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
                </div>
                <div class="col-md-4">
                    <ul class="menu">
                        <li>
                            <ul class="active">
                                <strong><a href="#getting-started">Getting started</a></strong>
                                <li><a href="#client">Client</a></li>
                                <li><a href="#server">Server</a></li>
                                <strong><a href="#going-further">Going Further</a></strong>
                                <li><a href="#awareness-module">Awareness module</a></li>
                                <li><a href="#text-editor-adapter">Text editor adapter</a></li>
                                <li><a href="#network-adapter">Network adapter</a></li>
                                <hr>
                                <li><a href="#top">Back to top</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
            <hr>
            <% include footer %>
        </div>
        <% include scripts %>
        <script>
            "use strict";
            hljs.initHighlightingOnLoad();
        </script>
        <script src="http://d3lp1msu2r81bx.cloudfront.net/kjs/js/lib/kinetic-v5.0.2.min.js"></script>
        <script defer="defer">
        var flag = false;
        function drawArrow(fromx, fromy, tox, toy) ***REMOVED***
            var headlen = 20;   // how long you want the head of the arrow to be, you could calculate this as a fraction of the distance between the points as well.
            var angle = Math.atan2(toy-fromy,tox-fromx);

            line = new Kinetic.Line(***REMOVED***
                points: [fromx, fromy, tox, toy, tox-headlen*Math.cos(angle-Math.PI/6),toy-headlen*Math.sin(angle-Math.PI/6),tox, toy, tox-headlen*Math.cos(angle+Math.PI/6),toy-headlen*Math.sin(angle+Math.PI/6)],
                stroke: 'black'
        ***REMOVED***);
            return line;
    ***REMOVED***

        function drawPopoverArrow(title, content, fromx, fromy, tox, toy) ***REMOVED***
            var group = new Kinetic.Group();

            group.add(drawArrow(fromx, fromy, tox, toy));
            group.add(new Kinetic.Text(***REMOVED***
                x: (fromx + tox) / 2 - 30,
                y: fromy - 20,
                text: title,
                fontSize: 18,
                fontFamily: 'Helvetica Neue',
                fill: '#259dff'
        ***REMOVED***));

            group.on('click', function (event) ***REMOVED***
                flag = true;
                console.log(event.evt);
                console.log('Dans le onclick');
                $('#popover-title').html(title.bold());
                $('#popover-content').html(content);
                $('pre code').each(function(i, e) ***REMOVED***hljs.highlightBlock(e)***REMOVED***);
                $('#popover').removeClass('hide')
                    .css('display', 'block')
                    .css('max-width', '600px')
                    .css('width', '600px')
                    .css('top', event.evt.pageY - $('#popover').height() - 70 + 'px')
                    .css('left', event.evt.pageX - $('#popover').width()/2 - 50 + 'px');
        ***REMOVED***);

            group.on('mouseover', function (event) ***REMOVED***
                $('#container').css('cursor', 'pointer');
        ***REMOVED***);
            group.on('mouseout', function (event) ***REMOVED***
                $('#container').css('cursor', 'auto');
        ***REMOVED***);

            return group;
    ***REMOVED***

        function loadImages(sources, callback) ***REMOVED***
            var images = ***REMOVED******REMOVED***;
            var loadedImages = 0;
            var numImages = 0;
            var src;

            for(src in sources) ***REMOVED***
                numImages++;
        ***REMOVED***
            for(src in sources) ***REMOVED***
                images[src] = new Image();
                images[src].onload = function() ***REMOVED***
                    if(++loadedImages >= numImages) ***REMOVED***
                        callback(images);
                ***REMOVED***
            ***REMOVED***;
                images[src].src = sources[src];
        ***REMOVED***
    ***REMOVED***

        function drawNamedImage(name, source, x, y, width, height) ***REMOVED***
            var group = new Kinetic.Group();

            group.add(new Kinetic.Text(***REMOVED***
                x: x - width / 2 + 30,
                y: y - height / 2 - 50,
                text: name,
                fontSize: 30,
                fontFamily: 'Helvetica Neue',
                fill: 'black'
        ***REMOVED***));

            group.add(new Kinetic.Image(***REMOVED***
                image: source,
                position: ***REMOVED*** x: x, y: y ***REMOVED***,
                offset: ***REMOVED*** x: width / 2, y: height / 2 ***REMOVED***,
                width: width,
                height: height
        ***REMOVED***));     

            return group;
    ***REMOVED***

        function drawCanvas(images) ***REMOVED***
            var stage;
            var layer;
            var group;
            var title;
            var content;
            var width;
            var height;
            var coordinatorText;
            var coordinatorImg;
            var textEditorText;
            var textEditorImg;

            stage = new Kinetic.Stage(***REMOVED***
                container: 'container',
                width: 1024,
                height: 300
        ***REMOVED***);
            layer = new Kinetic.Layer();

            layer.add(drawNamedImage('Coordinator', images.coordinator, 150, 150, 200, 200));
            layer.add(drawNamedImage('Text editor', images.textEditor, 800, 150, 200, 200));

            title = 'initEditor';
            content = "<p>This event is emitted in order to signal the text editor that the coordinator is ready to work and to set the initial state of the text.</p><pre><code>&lt;script&gt;<br>  data: ***REMOVED***<br>    str // The current state of the text<br>  ***REMOVED***<br>&lt;/script&gt;</code></pre>";
            group = drawPopoverArrow(title, content, 300, 75, 645, 75);
            layer.add(group);
            

            title = 'change';
            content = "<p>This event is emitted in order to signal the coordinator that the user has modified the document.</p><pre><code>&lt;script&gt;<br>  data: ***REMOVED***<br>    action, // The type of the modification ('insertText' or 'deleteText')<br>    index, // The index of the string where the modification occured<br>    text // The text inserted or deleted<br>  ***REMOVED***<br>&lt;/script&gt;</code></pre>";
            group = drawPopoverArrow(title, content, 645, 145, 300, 145);
            layer.add(group);

            title = 'update';
            content = "<p>This event is emitted in order to signal the text editor that the document has been modified by another user and provide the new state of the document.</p><pre><code>&lt;script&gt;<br>  data: ***REMOVED***<br>    str, // The new state of the text<br>    operations, // Array which contains all the text operations generated by the other client, used to calculate the modification to apply to the position of the cursor<br>    diffNbLines // Difference between the previous document's number of lines and the new one, used to scroll in order to not disturb the user (can be negative)<br>  ***REMOVED***<br>&lt;/script&gt;</code></pre>";
            group = drawPopoverArrow(title, content, 300, 215, 645, 215);
            layer.add(group);

            stage.add(layer);
    ***REMOVED***

        var sources = ***REMOVED***
            coordinator: 'assets/img/coordinator.svg',
            textEditor: 'assets/img/text-editor.png'
    ***REMOVED***;
        loadImages(sources, drawCanvas);

        $('#container').on('click', function() ***REMOVED***
            if(flag === true) ***REMOVED***
                flag = false;
        ***REMOVED***
            else ***REMOVED***
                $('#popover').addClass('hide');
        ***REMOVED***
    ***REMOVED***);
        </script>
    </body>
</html>